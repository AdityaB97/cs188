{"start":[0,1260,1510,4950,7560,9700,11180,15510,19030,21530,22990,25090,28330,31500,35060,36090,37200,39000,42620,45340,49070,52370,54360,57250,60830,65090,68670,71190,72970,74170,76990,81410,82610,84670,88480,94530,98670,101600,103810,105280,108380,111520,113430,117190,119780,124430,127610,130310,131960,135760,138450,142100,143300,145760,149930,154750,157430,159330,162560,164700,167380,169720,170610,173050,175760,177000,178780,181090,183320,187380,188630,191140,192900,196710,198440,200590,201560,203230,204770,207070,208880,211490,214010,217890,220900,223800,227330,231190,232630,235540,239610,242220,244360,246620,251050,255560,256560,259050,262850,266150,268400,270800,274810,276060,279220,280470,285880,290090,291800,296060,297490,301390,303610,305150,307560,311690,312360,315610,316570,319160,322800,328180,332360,334160],"end":[1260,1510,4950,7560,9700,11180,15510,19030,21530,22990,25090,28330,31500,35060,36090,37200,39000,42620,45340,49070,52370,54360,57250,60830,65090,68670,71190,72970,74170,76990,81410,82610,84670,88480,94530,98670,101600,103810,105280,108380,111520,113430,117190,119780,124430,127610,130310,131960,135760,138450,142100,143300,145760,149930,154750,157430,159330,162560,164700,167380,169720,170610,173050,175760,177000,178780,181090,183320,187380,188630,191140,192900,196710,198440,200590,201560,203230,204770,207070,208880,211490,214010,217890,220900,223800,227330,231190,232630,235540,239610,242220,244360,246620,251050,255560,256560,259050,262850,266150,268400,270800,274810,276060,279220,280470,285880,290090,291800,296060,297490,301390,303610,305150,307560,311690,312360,315610,316570,319160,322800,328180,332360,334160,335410],"text":["","PROFESSOR: OK.","Let's think about how we're going to deal with games like chess, where we","can't possibly search the whole game tree.","Essentially we've got resource limits--","in this case, time--","that tell us we can only look forward so far into the tree before the","exponential growth of the tree gets us.","This is always going to be the case in a realistic game.","You will not be able to search to the leaf.","So you've got this tree like the one shown.","There's alternating min and max layers, and way down at the bottom","somewhere are the actual terminal utilities, which may all be plus and","minus 1, but we can't search down to them.","So the solution--","pretty straightforward.","We're going to do a depth-limited search.","We're only going to actually go down as far as we have time for.","So we're going to search for some limited depth in the tree.","Now the problem is, when we get to the end of our search, we don't have","terminal utilities, because we're not actually at the end of the game.","We're just a few moves ahead.","So what we need is we need to replace the terminal utilities in the min and","max algorithm with what's called an evaluation function, which takes a","non-terminal position and gives us some estimate of what the terminal","utility under that tree would be under min and max flat.","So for example, we might cut the tree off right here and","stick in these numbers.","Are these the min and max values?","Almost certainly not, but they're something.","So now we do our search, we run min and max, and we propagate everything","up to the root.","This is not the min and max value at the root.","This is the min and max value under the assumption that this evaluation","function accurately represents the min and max values of the truncated notes.","As an example here, back to chess, if we've got about 100 seconds to move,","and we can explore 10,000 nodes per second, which actually isn't very","many, that means we can check something like a","million nodes per move.","And with alpha beta pruning that we're going to talk about later, that means","you'll get to something like depth 8, and that will not be a world champion","chess player, but it will be decent.","So this kind of idea of truncation is very important.","We're going to have to truncate, so we'll want to do it as well as","possible, meaning go as deeply as we can and plug in as good numbers as","possible for the evaluation function.","Of course our guarantee of optimal play is gone, because these are no","longer the min and max values.","Our valuation function may not be very good at knowing that there's a trap","just beyond the horizon.","Searching more plies, that is, going deeper into this tree, makes a big","difference.","And we'll see examples of that in a second.","One cool thing you can do is you can do iterative deepening here.","What that means is you do a search for one move in response, one ply, and","then two, and then three, and then four.","At some point, you'll run out of time.","At any given time, you've done essentially the best search you can","do, and you always have a move.","And the more time you get, the better that move gets.","That's what's called an anytime algorithm, and it's a really nice","property to have.","You've always got an answer, and that answer gets better over time.","","So depth matters.","Evaluation functions are going to be imperfect.","We're going to talk about how we can make them as good as possible, but","they're always going to be imperfect.","However, the deeper you bury them into a tree, the less their imperfection","matters in general.","So we want to make them as good as possible, but we also want to bury","them deep in the tree.","In general, the deeper you search, the more likely you are to see what's","actually going on.","So here you have the agent on the top who's got a very","hazy view of the future.","Maybe the future looks quite scary.","A monster mountain.","But then you look just a little bit further, and you realize, it's just","some nice trees.","And it's always better to look further, but you'll always have a","limit to your resources.","This is actually an important example of a trade-off here between the","complexity of the features that go into the evaluation function--","you could make a really complicated evaluation function, and then you","wouldn't have to search so deeply to behave well, or you could have a very","simple evaluation function, and you could compensate by doing more min and","max search.","And there's this trade-off between whether your behavior arises from the","computation or from the complexity of your stored evaluation.","Let's take a look at this in practice.","So here's a configuration.","Let's think about this for a second.","We'd like to eat that dot, and if we look forward just a couple steps, we","won't be able to see the actual eating of the dot, or any future collisions","with the ghosts.","We're just going to look forward and see whether or not we can be closer or","farther from the dot, but we'll have to have an evaluation function that","says, being close to the dot is better than being farther, or it's all going","to look the same to the evaluation function.","So let's see what happens when we search two ahead.","Well, we're going to move towards the dot, unsurprisingly.","Except now what happens?","","We get pinned.","","What happens if instead, we have a mastermind Pac Man here, and we can","see all the way into the future?","We can see the whole game play out, which on this board is feasible?","Well, now what should we do?","The critical thing is that blue ghost is going to go somewhere, and once it","goes somewhere, it's committed.","So what we should actually do--","and this is not obvious from a horizon of 2--","is move towards the orange ghost, because we're still not actually in","any danger.","A reasonable evaluation function that looks just a little bit in the future","would say, that's crazy.","You move towards the ghost and away from the dot.","But in fact, if you look deeply enough into the tree, you see that what this","allows you to do is force the blue ghost to make a decision before you","have to, and that lets you get around.","And that is Mastermind Pac Man.",""]}