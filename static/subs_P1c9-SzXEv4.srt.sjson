{"start":[0,1860,4450,8350,10080,14000,16580,20050,21050,24080,26480,29710,31300,34340,37270,41330,44670,46410,49950,53040,55990,59550,62400,64550,66790,69430,73480,75560,78830,82100,84800,88540,89260,92500,93230,95710,98650,103840,106040,109030,110690,113640,114980,116670,119160,119810,120980,121870,124760,126470,132070,134410,136130,138625,142020,143240,144220,146590,147290,149990,151790,153770,154330,155400,155890,157220,158370,159700,163060,165770,166980,171020,174660,178810,180610,184430,187250,188400,191180,193800,196310,200370,206420,207910,210940,215230,216530,217310,220360,222960,226610,228600,232070,234110,235500,237090,238470],"end":[1860,4450,8350,10080,14000,16580,20050,21050,24080,26480,29710,31300,34340,37270,41330,44670,46410,49950,53040,55990,59550,62400,64550,66790,69430,73480,75560,78830,82100,84800,88540,89260,92500,93230,95710,98650,103840,106040,109030,110690,113640,114980,116670,119160,119810,120980,121870,124760,126470,132070,134410,136130,138625,142020,143240,144220,146590,147290,149990,151790,153770,154330,155400,155890,157220,158370,159700,163060,165770,166980,171020,174660,178810,180610,184430,187250,188400,191180,193800,196310,200370,206420,207910,210940,215230,216530,217310,220360,222960,226610,228600,232070,234110,235500,237090,238470,239720],"text":["","DAN KLEIN: We're going to describe now something called backtracking search.","Backtracking search is the basic uninformed algorithm for solving CSPs,","and it basically takes two ideas.","The first idea is we should really only assign one variable at a time.","So on the applet, we didn't actually see this problem.","But in principle, from the empty assignment, you've got a whole bunch","of successors.","There's a whole bunch of variables you could assign next, and for each one,","you have a whole bunch of values you could assign next.","So the first idea is know at any given point, there should only be one","variable in play.","And of course, we're going to have to consider all of its possible values.","So one variable at a time.","The second idea is we should really to check these constraints as we go.","So for example, when we assign that second blue value, we should","immediately know we've done something wrong.","We should be checking our constraints incrementally as we go.","And one way to say that is we should only consider assigning values which","do not conflict with previous assignments.","Now of course, in order to make sure that the values we're assigning","haven't created a conflict, we might have to do some computation.","But if you think about this, essentially what we're doing is we're","doing our goal test incrementally.","In a standard search problem, the goal test comes at the end.","If you don't pass the goal test, no worries, maybe your successors will.","Here is CSPs we have a stronger notion.","We have the notion of passing the goal test at the end, but we also have the","notion of having screwed up so badly that even though you've got","successors, they're not going to work out.","OK, so we need the ability to just bail as soon as we've violated a","constraint.","And it should be a fairly intuitive thing to add, but it's not something","you have in search.","In search, the only notion is the goal test.","Failing the goal test is not bad, passing the goal test is good.","We need the ability to fail, and really fail, and get kicked out.","OK, so backtracking search incorporates two ideas.","The first one is assign one variable at a time, and the second one is check","the constraints as you go.","Depth first search augmented with these two ideas is called","backtracking search.","And you might think, why do they call it that?","Isn't depth first search kind of already a backtracking search?","Yes, yes.","That's what it's called.","OK.","If you put this stuff together, we can solve n-queens for something","like n equals 25.","And if we go into our demo, let's take a look at what this looks like.","So I'm going to change here the algorithm from naive search to","backtracking.","And again, we start off with the empty case.","If I click next, I'll assign blue, and we'll move on to the","next one to the right.","What are we going to assign it?","Well, we're not going to do blue because that already violates a","constraint.","So we're only going to consider legal assignments.","And that means we assign red.","And then what do we assign next?","Blue.","Is that a good idea?","I don't know.","That's why we have CSP solvers.","So we keep going.","Red here.","We're smart enough to assign green, but it's still not going to work out","because here, there won't be any successors, and","we'll have to backtrack.","But if I click through it, we don't do a lot of backtracking.","And eventually we just get to the end, with a couple hiccups along the way.","All right, let's see this in psuedocode.","So in pseudocode, it would look something like this.","There would be some function called backtracking search, and in fact, this","is typically implemented recursively.","So what do you do?","When you recurse, you check to see whether your assignment is complete.","If so, you return it, because you don't get a complete assignment unless","everything kind of passed the constraints along the way.","So the goal test was smeared along the entire computation to get here.","Then we select a variable, and we consider each value in its domains in","some order.","And then we do this inner loop that says if that value doesn't violate a","constraint, extend the partial assignment in recurse.","OK, so simple enough.","That's backtracking.","It's depth first search, here implemented recursively, plus this","notion that the variables come in some order.","Plus this notion that as soon as you violate a constraint, you fail.","And there are some choice points here.","And the choice points in particular, as it's written here, are going to be","well, what order should I go through the variables?","What order should I try to values?","These kinds of ideas are going to help us make","backtracking search even better.",""]}