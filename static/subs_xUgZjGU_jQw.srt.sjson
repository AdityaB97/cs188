{"start":[0,970,1460,4350,6560,7980,10490,12970,13890,15280,16340,19760,22400,25780,26960,30260,33780,38260,41760,43780,47010,50660,57120,59360,60560,62450,65000,66410,68590,71740,74500,76890,79920,84520,85550,88250,90210,94280,96550,97375,100780,103930,105430,108630,114190,115880,119440,121480,122990,123790,126950,130620,132770,136330,138160,138800,141800,145690,149015,150050,151720,154170,157050,160060,163310,164960,166860,170620,175310,179060,182898,185320,188730,191520,195650,198690,201630,205260,209850,211900,213650,216930,219110,220890,225100,229230,233230,235370,237075,238400,241180,244590,248620,249540,253760,255310,256870,259100,262710,268200,270162,270650,273370,276450,280510,281930,284770,288950,291920,294940,296300,298840,300810,304450,305620,306950,309530,311390,312700,314990,319000,321570,323870],"end":[970,1460,4350,6560,7980,10490,12970,13890,15280,16340,19760,22400,25780,26960,30260,33780,38260,41760,43780,47010,50660,57120,59360,60560,62450,65000,66410,68590,71740,74500,76890,79920,84520,85550,88250,90210,94280,96550,97375,100780,103930,105430,108630,114190,115880,119440,121480,122990,123790,126950,130620,132770,136330,138160,138800,141800,145690,149015,150050,151720,154170,157050,160060,163310,164960,166860,170620,175310,179060,182898,185320,188730,191520,195650,198690,201630,205260,209850,211900,213650,216930,219110,220890,225100,229230,233230,235370,237075,238400,241180,244590,248620,249540,253760,255310,256870,259100,262710,268200,270162,270650,273370,276450,280510,281930,284770,288950,291920,294940,296300,298840,300810,304450,305620,306950,309530,311390,312700,314990,319000,321570,323870,325120],"text":["","DAN KLEIN: All right.","So how are we going to solve a tree structured CSP?","We can't just break it into two pieces like we did with","independence sub problems.","OK, here's an algorithm for a tree structured CSP.","The first step is to take this tree structure and order it.","What does that mean?","It means you pick a root variable.","Any variable works.","So you grab this CSP by some root variable, and you kind of pick it up","by its ankle, and let everything else hang down.","OK, now you've got the CSP starting at some variable, and there's a","direction to it.","Everything else is below, and according to some order.","And we end up with some linear order, and there are multiple choices.","And here is a linearization starting at A, and you'll notice that all of","these constraints, which do not have direction, have been replaced","by arcs which do.","It's still the same CSP, but these directed arcs are going to help me","think about something very much like arc consistency.","OK, so here is an ordering, starting at A, and linearizing with that CSP.","Let's imagine we're still in map coloring.","OK, very important.","Most CSPs are not map coloring.","Most constraints are not inequality constraints, but that","is our running example.","So let's say these are the domains.","So for whatever reason, unary constraints or whatever, these are the","domains at this point in time.","And we can put those domains over here vertically.","So red and blue below A are its remaining domains.","So we'd like to solve this CSP, and it's tree structured.","We've ordered it.","Step two is to do a removal pass.","That's a lot like arc consistency.","So what we're going to do is we're going to visit each arc once, and","we're going to make that arc consistent.","How do we make it consistent?","The way we always make it consistent, which is we pull the arc over, we","check to see what's in its trunk, and we cross things off if needed.","All right, so let's do that here.","Let's actually make these arcs consistent.","So the way we'll do this is we will start with F, and we will","work our way leftward.","When we visit F, we're going to say what arc comes into you?","How many arcs can come into F?","One, because it's a three.","Very important.","So I look at the arc coming into F. It's D to F. And I look in its trunk.","So I look in D, and I say are there any values in D which are guaranteed","to create a constraint violation?","And I say, well, at D, if I assigned blue, I'd be in trouble.","So let's remove that.","All right.","Now the arc coming into F, D to F has been made consistent.","Now we go to E. We look at the arc coming into E. So that's D to E, and I","say, are there any values at D that guarantee a constraint violation?","And it looks pretty good.","If I choose red, I'll be able to choose anything.","If I choose green, I'll still have the option of blue.","So now that arc is also consistent.","Now I go to D. What arc comes into D?","Well, it's B to D. So I look at B to D, and I say do I","need to remove anything?","No.","I look at the arc coming into C. That's B to C, and I see that if B","were assigned green, I'd be toast, so let's remove green.","Now I look at the arc coming into B, which is A to B.","And I see that blue has to be removed there.","All right, so what have we done?","We have not done the full algorithm for enforcing arc consistency.","We have not visited nodes over and over again with a whole queue.","We have enforced the consistency of arcs in a very particular pattern,","starting essentially at the right and working leftward.","Now, the question is, is that enough?","Well, let's see what happens, and then we'll see whether or not it's enough.","The next step after we've order these nodes, we've done a","removal pass going backwards.","Now we do an assignment pass going forward.","So we started A, and we go left to right.","And we assign in any way we like.","Let's see what happens.","So I look at A, and it's only got one choice left, so I'll take it.","Now I go to B. Is it possible that I'm in trouble?","Is it possible that I've just made a choice at A, such that at B I will","have no options left?","Well, it's not, because this arc is consistent.","That's what consistency means.","The troublesome thing at A, blue, got removed.","So what it means to say that A B is currently consistent is whatever I","picked, including red, has an extension, and I'll take one.","So I take blue.","And whatever I did at B, now I can move on to C and I know I'm safe.","So when I get to C, I'll pick something.","And so far, there's not a lot of choice.","Now I get to D, I've actually got a choice.","And what I choose, it may not be that everything is safe, but I chose","something at B. The arc from B to D is consistent, and so whatever I chose at","B has an extension.","All right.","To keep it interesting, I will choose green.","Now I get to E, you see I can't choose anything at E, but I'm guaranteed","something by the consistency of the D to E arc, so I choose it.","And then again, I choose this here.","And it turns out that this algorithm guarantees you that in this forward","assignment phase, there will always be a consistent solution at each point.","You'll pick it and you'll move on, which means no backtracking.","And so this whole thing was pretty efficient, right?","What was the run time?","Well, I did something to each arc going left.","And I did something to each arc going right.","And so basically, it's order n from the fact that I visit each arc a","constant number of times.","And at each arc, what did I do?","Well, I looked at all the pairs of domain values in the head and the","tail, and then I checked whether they're OK.","That's D squared.","So it's a linear algorithm, just like I promised.","Now there's this important question, which is am I sure it was enough to","just kind of enforce consistency of the arcs once?","I have worries, like that so I should prove something.",""]}