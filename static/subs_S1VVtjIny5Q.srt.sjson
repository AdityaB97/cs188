{"start":[0,1990,5720,8880,12680,14550,16450,19870,22980,24910,28270,30970,33420,34345,40150,42180,43980,44850,46310,49620,50820,53800,56770,60350,61390,63120,66970,69090,71130,74200,75940,77190,79380,82620,83220,85290,86110,88710,90260,91370,94200,97330,98210,100510,104160,106550,109000,110170,111220,113950,115540,118810,121930,122420,123800,125060,127940,129090,132240,133830,135540,138840,139650,143440,146370,149510,151120,152120,153110,156490,157800,160630,162610,164000,167180,168080,170130,171390,173920,176460,177480,180730,183450,184750,187650,188450,189840,191860,195660,198490,200330,203210,206440,206620,209660,211830,214000,216500,217570,219500,222590,227020,228160,230150,233590,236120,236270,238930,241480,243270,246280,247540,251170,253630,257180,261829,264290,266690,270480,273310,276880,280270,283620,286480,290590,292750,296700,299380,300470,302910,304050,306220,307740,311250,312890,315640,319990,321970,324710,325770,327440,328760,332680,334040,335210,337520,341700,344010,347410,351890,355030,356410,359980,362930,364460,368587,369490,372340,376060,377640,380680,381530,386530,390730,392250,394630,397160,398400,400680,402100,403640,405860,409135,411790,412640,415050,416720,419190,420810,424780,427840,429800,433610,437520,440100,442340,443570,446070,447980,448990,450950,454670,458140,459090,463030,466050,467790,470533,471620,475790,479720,483000,486100,487210,490840,495310,496780,499720,502720,504690,507420,509110,511540,512679,516210,517940,521950,523570,525900,530040,533030,536520,538610,541810,544610,548170,549796,551630,554780,558070,561050,563290,565090,567920,570030,573710,577560,579730,583300,588350,590510,592880,596710,599360,601690,602940,603720,608220,610880,614250,615510,618030,622370,624660,626920,628890,631920,634150,635000,635850,637110,640940,643880,646500,649450,653880,656365,657570,661200,664330,667210,669710,673720,676880,677630,679980,681490,685390,686810,691130,693600,695770,697330,701370,702770,707030,709830,711500,714860,718570,719630,722780,723980,727540,730800,733650,736230,737960,738680,741950,743420,745450,747070,748600,753130,756390,757450,758800,761250,762980,764390,766860,769720,772660,774570,775640,776620,777540,778510,782430,786310,791290,793840,796010,797740,799170,800790,802150,803630,806190,808120,810930,812150,816140,818540,820030,821040,824420,826570,830280,832430,835800,837700,841250,843910,846000,849780,853020,854050,856660,859090,861890,865120,866870,869060,871320,874690,877410,880640,882630,883980,885400,887920,891420,896020,898800,900760,903560,906390,906880,910930,912360,916780,919630,922120,925000,925770,927860,930970,931660,933750,936170,938290,939550,942550,944080,946300,948900,950760,953600,956640,960240,964280,968770,972390,974212,976470,979490,980350,983100,985890,990670,992180,993640,996970,999110,1001620,1003700,1005310,1006070,1007180,1008430,1011350,1014180,1015100,1017290,1019240,1023040,1025950,1029319,1032450,1033349,1036089,1037599,1039579,1043010,1046210,1048980,1049590,1052330,1053410,1057200,1058530,1062130,1065360,1067400],"end":[1990,5720,8880,12680,14550,16450,19870,22980,24910,28270,30970,33420,34345,40150,42180,43980,44850,46310,49620,50820,53800,56770,60350,61390,63120,66970,69090,71130,74200,75940,77190,79380,82620,83220,85290,86110,88710,90260,91370,94200,97330,98210,100510,104160,106550,109000,110170,111220,113950,115540,118810,121930,122420,123800,125060,127940,129090,132240,133830,135540,138840,139650,143440,146370,149510,151120,152120,153110,156490,157800,160630,162610,164000,167180,168080,170130,171390,173920,176460,177480,180730,183450,184750,187650,188450,189840,191860,195660,198490,200330,203210,206440,206620,209660,211830,214000,216500,217570,219500,222590,227020,228160,230150,233590,236120,236270,238930,241480,243270,246280,247540,251170,253630,257180,261829,264290,266690,270480,273310,276880,280270,283620,286480,290590,292750,296700,299380,300470,302910,304050,306220,307740,311250,312890,315640,319990,321970,324710,325770,327440,328760,332680,334040,335210,337520,341700,344010,347410,351890,355030,356410,359980,362930,364460,368587,369490,372340,376060,377640,380680,381530,386530,390730,392250,394630,397160,398400,400680,402100,403640,405860,409135,411790,412640,415050,416720,419190,420810,424780,427840,429800,433610,437520,440100,442340,443570,446070,447980,448990,450950,454670,458140,459090,463030,466050,467790,470533,471620,475790,479720,483000,486100,487210,490840,495310,496780,499720,502720,504690,507420,509110,511540,512679,516210,517940,521950,523570,525900,530040,533030,536520,538610,541810,544610,548170,549796,551630,554780,558070,561050,563290,565090,567920,570030,573710,577560,579730,583300,588350,590510,592880,596710,599360,601690,602940,603720,608220,610880,614250,615510,618030,622370,624660,626920,628890,631920,634150,635000,635850,637110,640940,643880,646500,649450,653880,656365,657570,661200,664330,667210,669710,673720,676880,677630,679980,681490,685390,686810,691130,693600,695770,697330,701370,702770,707030,709830,711500,714860,718570,719630,722780,723980,727540,730800,733650,736230,737960,738680,741950,743420,745450,747070,748600,753130,756390,757450,758800,761250,762980,764390,766860,769720,772660,774570,775640,776620,777540,778510,782430,786310,791290,793840,796010,797740,799170,800790,802150,803630,806190,808120,810930,812150,816140,818540,820030,821040,824420,826570,830280,832430,835800,837700,841250,843910,846000,849780,853020,854050,856660,859090,861890,865120,866870,869060,871320,874690,877410,880640,882630,883980,885400,887920,891420,896020,898800,900760,903560,906390,906880,910930,912360,916780,919630,922120,925000,925770,927860,930970,931660,933750,936170,938290,939550,942550,944080,946300,948900,950760,953600,956640,960240,964280,968770,972390,974212,976470,979490,980350,983100,985890,990670,992180,993640,996970,999110,1001620,1003700,1005310,1006070,1007180,1008430,1011350,1014180,1015100,1017290,1019240,1023040,1025950,1029319,1032450,1033349,1036089,1037599,1039579,1043010,1046210,1048980,1049590,1052330,1053410,1057200,1058530,1062130,1065360,1067400,1068650],"text":["","PROFESSOR: So what kind of reasoning is gonna go into adversarial search?","Well, we're gonna have an agent who's trying to figure out what to do.","And just like in regular single-agent search from before, the way we're","gonna decide what to do is we're gonna think about the","consequences of our actions.","The difference is rather than thinking about the sequence of actions that I","can perform, I need to think about my opponent.","I imagine taking an action.","And then I imagine that my opponent will then be in the situation of","thinking about what the opponent should do.","And they're gonna imagine that they're taking an action to","which I will respond.","And we'll get this embedded interleaving of our future states.","So what's this gonna look like in computation?","Well, remember back to the single-agent case.","We drew these trees.","We callled them search trees.","And what a search tree had was at the root it had the current position.","So here's the current state.","And here we have Pac-Man near a dot.","Well, in a single-agent tree I can take an action.","And because I have two actions in this case, left and right, I have two","possible futures.","And below that I have more futures.","And the search tree then goes down until the game ends.","So, what happened in this tree?","Well, some of these paths go forever.","Some of these paths end because I've eaten the last dot, and the game","terminates.","And what did we actually do?","Well, we imagine we associate values with this.","So let's say this is the best possible outcome where I go straight to the dot","and eat it.","And then there are various other outcomes buried further","in the other trees.","And I can associate numbers with them.","So this is a search tree.","Current states are the root.","All possible futures then branch out from there.","And what happened in the case of single agent is I get to pick any","outcome I like.","I can pick any leaf in this tree.","In the actual search case, right, we are minimizing costs.","And here we're gonna be talking about maximizing values.","So if we really wanted to work out this analogy, there would have to be","some sign changes.","I'm not gonna get into that.","For today, it's gonna be maximizing values.","So the question is, what should we do?","Well, in a single-agent case it's pretty clear what we should do.","We should find a way to make this outcome happen, right.","And we can.","We just go right twice.","And no one's gonna stop us.","So we can essentially pick any leaf.","Let's formalize that.","Let's talk about taking this tree and thinking about each","state having a value.","So what's a value?","A value is going to be a general idea we're gonna use over and over again in","this course.","And the value of a state is the best achievable outcome from that state.","And that's gonna be in terms of these terminal utility functions.","So if I think about the root in this single-agent case, I can look at this","and think, well, there are a lot of outcomes.","Some of them are scored zero.","Some of them are scored eight.","But since I want the best and I can do whatever I want, the value of the root","should be eight.","Well, let's go one more step figuring that out.","Well, for terminal states the value is known.","That's given, right.","In the definition of the game I'm trying to solve, I know","the terminal values.","Just like in search I knew the costs.","What about the other ones?","So for example, what about this state here?","Well, in this state here I have a choice.","I can get the eight.","Or I can get whatever is down below the left path.","So here, this state here has some value.","Let's say it's six.","And if I have a choice between six and eight and I'm maximizing, I should","take the eight.","So the value here should be eight.","And so in general, I can write this equation.","I can write that the value of a state is defined to be the maximum over its","children of the value over the children.","So in some sense this is stuff we already know.","The value of a state is the maximum of the value of its children.","That's exactly how it works out in the single-agent case.","OK.","Let's think about the case where we have an adversary.","So here we have Pac-Man trying to eat a dot.","And we also have a ghost.","If this is the root of the tree, we can still do the same","thought process as before.","We can think, what are the possible futures?","Well, I can still move left or right.","The difference is now in each of these possible futures, the ghost can then","move left or right.","So there's still a tree of possible futures.","From this left state, the ghost can either come towards me and go camp the","dot, or it can go to the right.","OK.","And then over here, again, the ghost has a choice.","So we have the exact same kind of branching futures.","It's just like the single-agent case.","The only difference in this tree is who controls what","happens at each node.","The actual tree itself is the exact same kind of set of branching futures.","Everyone's in agreement about what might happen.","But the two agents are in disagreement about what they will choose to do.","And again, these trees in general go on very deeply until the game ends.","And there gonna be various terminal values at the bottom.","And I've illustrated a couple numbers here.","So the question is now we still have this tree, except we can't do we did","with a single-agent case and look at this and say, oh, you know what?","I would like that plus eight or I would like some number somewhere at","the bottom because our opponent may not let us have it.","So we need to think about, now, what a value is in the case of an adversary.","And this is gonna give us the idea of a minimax value.","It's still gonna be the best outcome we can achieve under perfect play","against an optimal adversary.","So it's still the best thing that we can enforce, but now it has to","incorporate this idea of adversarial reasoning.","So let's think about this.","We still know what's at the bottom because the game defines","the terminal states.","So for all the terminal states at the bottom of the tree-- and here I'm","imagining the tree is much smaller.","I imagine the game just ends after this move and response.","So at the terminals we know the value.","We can look them up because the game's over.","For a state that's under my opponents control, I imagine that this ghost is","out here to minimize my value.","And so even though I may look out and I may look and say that","plus eight's terrific.","I would love to have it, right.","It's just not gonna happen.","Because if we ever got to this state that's highlighted here, what's the","ghost gonna do?","They're gonna go left.","They're gonna force the number down to negative 10.","And so in essence here, this state's minimax value is negative 10.","The computation here is fairly straightforward.","I just figure out what the values of the children are and I minimize.","That's what you do at a node that the opponent controls.","Now a node that the agent controls, we're gonna maximize.","So it's just like before.","So over here the opponent would have forced us down to negative eight.","And then I look and I say, well, I'd really love that plus eight.","But it's not an option, right.","I'm really only choosing between going left to which I know the response will","be negative eight.","Or going right, which I know the response will be negative 10.","And then that means over here, what I should do is I should go left and I","should get negative eight.","So in other words, life is much, much worse when there's","an adversary, right.","There's this nice plus eight, and the ghost just won't let me have it.","Here's an example of a game tree that's already pretty big for a game","that's pretty small.","So how many of you have played tic-tac-toe?","How long did you play tic-tac-toe for?","Not very long.","Why do people stop playing tic-tac-toe, right?","You learn the game tree pretty fast.","You know exactly what's gonna happen.","And what's gonna happen in tic-tac-toe?","Second player is gonna force a draw, unless one of the players is really,","really bad, like if they're three years old.","OK.","But when adults play tic-tac-toe, it's pretty boring.","So here's the tic-tac-toe game tree.","It's already pretty big even though the game is simple.","It looks just like these other game trees.","It alternates layers where the maximizing agent here, the blue agent,","moves first, and then the minimizing agent, and then the maximizing agent,","and so on until the game ends.","Now at the bottom, the utilities are given here.","And they're a plus one for a win for the max agent, minus one for a win for","the min agent, and zero for a draw.","We could do a bunch of computation and figure out what the","value of the root is.","We probably all did this computation at some point in our life.","So we kind of know what the value is, right.","What is it?","We know the value at the root is zero.","But more importantly, even if you didn't know that, you would know that","it's either plus one, minus one, or zero, right.","It's not 0.7.","I guarantee you for any tree like this that's got minus ones, plus ones, and","zeros at the bottom, no matter what the value is at the root,","right, it's not 0.7.","Because the only operations we use to compute the value at the root","are mins and maxes.","So you're gonna get at the root a minimax value which is backed up by","some particular outcome, right, might be that one, might be this one.","In practice, it's backed up by a bunch of these for tic-tac-toe, right.","Because tic-tac-toe you can force a draw.","That's an important point.","The minimax value isn't just some weird aggregation of the whole tree.","It is some particular outcome or set of outcomes which are minimax optimal","in the appropriate sense.","That means if you get a 4.3 at the root, there's some leaf down there","that says 4.3.","So we've talked about what this adversarial tree is.","And we basically already have an algorithm for computing the","appropriate values.","That same algorithm that computes the values will also tell us","the actions to take.","Because when we maximize, we'll want to take the child or a child which","achieved the max.","So, for these kinds of deterministic zero-sum games of perfect information,","we have a tree like this.","And it's very important to conceptually break it up.","The terminal values are part of the game, just like in search the cost of","the arcs were part of the problem definition.","The algorithm you run propagates things up the tree.","So we compute these recursively.","And we'll take the minimum of the children at a min node, and we'll take","the maximum of the children at a max node.","The number this returns at the root is the minimax value of the root, as well","for the other nodes.","Let's think about how we implement this thing.","And we basically already know because we've done it by hand.","If we have a state and we're trying to compute the value of this state under","the maximizing player, well, what do we do?","We compute the values of all of the children.","And then we take the maximum.","Let's think just for a minute exactly how that works because this is gonna","get more complicated in a bit.","When we compute the maximum of a bunch of children, the way we compute the","max is we start with this value which is the max so far.","It's v here in the pseudocode.","The max so far starts out at negative infinity as the edge case.","And then every time I see a child, I improve the value of v if appropriate.","So if I see a child at seven, now the max is seven.","If I see a child that's 10, now the max is 10.","So at all points, I've got this lower bound which starts at negative","infinity and zips upward as I examine the children.","And after I've seen all the children, it's equal to the maximum.","So keep that in mind.","You start low.","And as you see the children, the max so far slowly tics up.","Now of course to do this, I need to be able to recurse.","And that means I need to be able to compute the min value.","And so how do I do that?","Well, I initialize to positive infinity.","And then as I compute all of the children's values, I lower my value of","v. So when I compute a min, I start high.","And it slowly tics low as I examine children.","This'll be important later.","Now you notice that these are mutually recursive.","And in fact, it's really pseudocode because it's omitting","an important thing.","What's this omitting?","It's omitting the base case.","So if I just did this in a naive way, it wouldn't work so well.","But we imagine that there's a case the captures the terminal case.","And if it's a terminal, then you simply return whatever the problem","tells you the terminal utility is.","This operationalizes the equations that we had before, which is that at a","max node, the value of that node is defined by the maximum","of the child values.","And at a min node, the value is defined by the minimum of","the children values.","Now when you actually implement this, you have to handle the base case.","And it's gonna turn out for your projects you're gonna have to handle","other cases as well, nodes that aren't pure min and max nodes.","And so a general way that's often convenient to implement this is to say","no, no, no.","States simply have values.","How do I compute the value of a state?","If the state is a terminal state, then I simply return it's utility.","Then I can have a dispatch.","And it says, if max controls this node, then I'm gonna return the max","value of the state which will do the appropriate thing.","If it's a min, then I'll do the min value which will","do appropriate things.","And then I have these specific functions just like before that always","call the dispatch.","And this is nice if you have multiple mins in a row or, for next class, once","you have expectation layers.","So let's do an example.","And more importantly for this example, since I know we can all do minimax","kind of by hand looking at the tree, let's think about how this appears to","the recursive algorithm.","The tree doesn't just materialize and you kind of see that plus eight in the","lower right corner.","Instead, it appears bit by bit in a depth-first fashion.","So if I want to compute the minimax value of this max node at the root,","well, I got to take a max of a bunch of things.","So far the max is negative infinity.","So I look for the first child.","It's a min node.","So I need to know its value, which of course involves recursing.","So I look at the first child.","The min so far is three.","The min so far is still three.","The min so far is still three.","And there's no more children, so I can stick a three right here.","Now at the root, the max has gone up to three, but there are","more children to check.","So I check the second child.","I'm gonna take the minimum of its children.","Its two.","It's still two.","It's still two.","So I write a two there, and I can return that.","The max so far at the root is still three.","Now I go to here, and I take the min.","So 14.","Now it's five.","Now it's two.","I return two.","And only now can the root say, all right, the maximum is three, and it's","supported by this action, which is in turn supported by this action.","So in fact, this is that magic node at the leaf that's giving rise to the","whole minimax value at the root.","But the root minimax is three.","So now we have an algorithm.","How efficient is it?","Well, it's just like a depth-first search.","You saw the procedure.","It recurses into each node.","It goes through the children from left to right in whatever order they're","returned by the successor function.","That means the time and memory profile are gonna be just like that","depth-first search.","The space isn't that bad because at any time your storage is basically","what's on their recursion stack.","The time is bad news.","And why is it bad news?","The branching factor of the game is b, which, for example, for chess is","something like 35.","The time is then b to the depth that you have to search.","So how deep m can you go?","Well, in chess, how many moves are there in a chess game?","Something like 100.","So for chess, the time complexity is gonna be something","like 35 to the 100th.","That's not going to happen.","So the exact solution for something like chess is completely infeasible.","Actually in this sense, I'm not even sure we're gonna do it for checkers","anytime soon.","The methods that solve checkers involved very aggressive","de-duplication so you didn't have to look at the same","state in subtle variance.","So for the case of chess, the exact solution is completely infeasable.","It's just not gonna happen.","But of course, we have chess playing programs.","They do use minimax-like methods.","And so, somehow we need to be able to actually play these games without","exploring the whole tree.","Let's think a little bit about the properties this algorithm has.","So here's a little game.","Max controls the root.","Min controls the response.","Now let's think about what the outcomes are.","Well, according to the minimax algorithm, if we get to the left","branch, min has no choice but to return 10.","On the right branch, what will min return?","Nine.","And that means that at the root, max can force a 10.","And that means max should choose to go left.","Why?","Because even though that 100 is there tempting you, you know min is not","gonna let you have it.","And so that right branch is only worth nine in a minimax sense.","And this is exactly the correct reasoning that you want if you're","playing against an evil mastermind.","So if you're playing against a perfect player, this is exactly","what you should do.","You cannot achieve more than 10.","And if you do this other action and you go to the right, you're gonna","achieve less.","You're gonna achieve nine.","Now that assumes a perfect player.","What if we don't have a perfect player?","What if we have this guy?","Well, now the reasoning isn't so clear cut.","The minimax value is still 10.","10 is the best you can achieve against a perfect player.","Maybe against this guy you have a shot at the 100.","So maybe you should go to the right.","Minimax does not include this kind of reasoning.","We get to methods that will in the next lecture.","Let's take a look about how minimax reasoning can lead to suboptimal","behavior when you are not in fact in an adversarial case.","Apologies for the grim nature we're about to put Pac-Man in.","So, let's imagine these are mastermind ghosts.","What's gonna happen?","It's not looking good for Pac-Man.","Now in this version of the game, you get points when you win.","You get points when you eat a dot.","You lose a point every step.","So what should Pac-Man do?","He should dive-bomb the orange ghost to stop a loss of points before the","inevitable failure.","So it's really, really grim.","And in fact, Pac-Man does what you think.","The ghost do what you think.","Now, that is adversarial worst-case reasoning.","What if these ghosts aren't adversarial?","What if, in fact, they're moving randomly?","I mean, look at them.","Look at those eyes, right.","These are not masterminds.","","So if in fact they're moving randomly, the orange guy's","coming towards Pac-Man.","There's not much we can do about that.","It actually doesn't have a choice.","The blue is either gonna go up or down, 50-50.","If the blue one goes up, it's gonna be bad.","If the blue one goes down, we're actually gonna win.","And so rather than assuming the worst case, we're basically in exactly the","tree I showed.","We're in the worst case, we should just save that one point by","dive-bombing the ghost.","But, half the time we're gonna do better.","And so let's see what Pac-Man does in the average case.","Well, we lucked out.","And here we'll be able to get through the whole game.","OK.","So we'll come back to that next time, about how we can do","that kind of reasoning.","But for now we'll just realize that against this guy,","you want to use minimax.","But if you are not playing against a perfect player, if for example your","player is random, than minimax is going to be overly pessimistic.","And we'll see the consequences of that later.",""]}