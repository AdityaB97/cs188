{"start":[0,730,3650,5890,10070,12790,14400,17280,21410,22460,25220,26590,30420,34560,38680,42970,46570,49940,52270,56480,59880,65019,68880,70460,73420,77020,79860,82520,87330,91120,94620,99000,100250,101110,103010,104510,107980,109590,113830,117970,121320,123150,126260,129920,134950,139530,142120,147230,150960,154990,156420,157980,160770,163530,167510,169420,170850,174850,177380,180100,183880,186150,190160,192660,199140,201230,206020,207450,209940,213160,214650,216650,220190,221570,223610,226890,229720,233060,233870,234600,235680,238330,240550,241620,245040,247130,251570,255420,257650,261710,264990,270060,274660,278790,281600,284020,286900,290740,294630,296740,298090,300620,304280,306760,308610,310300,313180,316870,319600,320690,321730,326390,329420,332590,336750,337920,339730,342950,345100,347140,350570,354750,357920,359950,363320,366630,369230,373170,376980,380770,385110,387900,390940,394540,397430,400690,403270,406840,408470,411680,415330,418920,420410,421900,422940,425850,429020,432280,435140,438180,439050,441370,444850,447260,450110,453700,456240,459940,461760,462880,465320,468100,471730,475040,478400,480440,483800,486900,490670,493010,496730,502010,507960,509270,513050,515880,519900,521650,523090,527330,529680,532530,535100,541030,545900,549750,552180,555900,559310,563260,565680,568820,571290],"end":[730,3650,5890,10070,12790,14400,17280,21410,22460,25220,26590,30420,34560,38680,42970,46570,49940,52270,56480,59880,65019,68880,70460,73420,77020,79860,82520,87330,91120,94620,99000,100250,100950,103010,104510,107980,109590,113830,117970,121320,123150,126260,129920,134950,139530,142120,147230,150960,154990,156420,157980,160770,163530,167510,169420,170850,174850,177380,180100,183880,186150,190160,192660,195560,201230,206020,207450,209940,213160,214650,216650,220190,221570,223610,226890,229720,233060,233870,234600,235680,238330,239770,241620,245040,247130,251570,255420,257650,261710,264990,270060,274660,278790,281600,284020,286900,290740,294630,296740,298090,300620,304280,306760,308610,310300,313180,316870,319600,320690,321730,326390,329420,332590,336750,337920,339730,342950,345100,347140,350570,354750,357920,359950,363320,366630,369230,373170,376980,380770,385110,387900,390940,394540,397430,400690,403270,406840,408470,411680,415330,418920,420410,421900,422940,425850,429020,432280,435140,438180,439050,441370,444850,447260,450110,453700,456240,459940,461760,462880,464130,468100,471730,475040,478400,480440,483800,486900,490670,493010,496730,498400,507960,509270,513050,515880,519900,521650,523090,527330,529680,532530,535100,536350,545900,549750,552180,555900,559310,563260,565680,568820,571290,572540],"text":["","PROFESSOR: So where are we so far?","Last lecture we defined a search problem.","A search problem is defined by the states in the search abstraction.","These are the configurations of the world as relevant","to your search problem.","There are actions, which come along with costs.","And there's a successor function which says how the states evolve in response","your action.","In essence, the successor function is your knowledge about","how the world works.","If I do this, what will happen in my model?","In addition, for a search problem, there's a start state and a goal test.","We then talked about a search tree, which is this mathematical object","where at the top is your start state and the nodes in this tree correspond","to all the possible plans you could execute.","And as you get deeper into the tree this corresponds to plans with more","and more steps.","Plans have costs, which are the sum of the action costs that lead into them.","And what we want to do with a search algorithm is systematically build this","search tree starting at the top, building towards a goal, and we'd like","to do this in a way that one, doesn't expand too much of the tree because","these trees are huge.","Actually, in general, a lot of the things we care about in AI, in","principle, are exponential in the worst case and we want, in practice,","do as little work as possible.","And these search algorithms primarily differed in their ordering of the","fringe, so how we decided which partial plan to expand next.","In addition, we started at the end of last class talking about optimality,","which is this notion of not just finding a way of achieving my goal,","but doing it in the lowest cost where the costs are encoded in the successor","functions costs.","","PROFESSOR: So here's an example of a search that has","nothing to do with pathing.","Lots of people like to latch onto this idea that search is moving from one","place in a maze to an exit.","Lots of search problems look nothing like positional planning.","So in the pancake problem, you have a stack of pancakes and you would like","to get them in order where the biggest pancake is on the bottom, and the","smallest pancake is on top.","But the only way you can do this as you're cooking the pancakes is to","insert your spatula at some point in the stack and do a flip.","So if I insert here and I do a flip, the top two will switch positions.","If I flip below that, I'll actually get to the goal state here.","And if I flip even further, I'll just flip the entire stack.","So at any given point, my state is some ordering of the pancakes.","My actions are the places I can insert my spatula.","And the successor function does the appropriate flipping of the prefixes","of these orders.","OK, that's a search problem.","It's perfectly well defined, and it has nothing to do with x, y","coordinates or positions.","So if we wanted to have a cost for this, one thing we could do is we","could just say minimize the number of flips.","Then the cost would all be one.","But it takes more energy to flip more pancakes, and so maybe we could say","the cost is the number of pancakes flipped.","Who cares about this kind of pancake flipping problem?","You might think this is only for some pancake flipping robot, but you'd be","surprised who has thought about this problem.","In fact, probably the last two people you'd ever think of, and particularly","the last two people you'd ever think would be working together on the","pancake problem, which is Bill Gates and Christos Papadimitriou.","They like pancakes.","OK, so what does this look like as a state space search graph?","Well, it looks something like this.","Remember, the nodes of this configuration of the world, which in","this case are just pancake orderings, in this case the arcs are","bi-directional and they have a cost.","That cost depends on how many pancakes I flipped.","And here is a weighted graph that encodes the search problem.","Now again, this fits on the slide.","For a big problem, this wouldn't fit on the slide.","And we somehow need to be able to find our goal in this kind of a graph","without building the entire graph.","All right, so in particular for this graph, here is your goal state, and","you start somewhere.","Who knows where you start.","Maybe you start here.","And you have to find some way of getting through this graph of least","cost that gets to your goal.","PROFESSOR: How did we do this?","We have this general algorithm that we're going to continue using today,","and we're going to improve it in two ways.","The general algorithm involved the key idea of a search tree and a fringe.","At the beginning, you start with the start state, which is the empty plan","where you've done nothing and you're just sitting at the start.","That's the root of the tree, and it is the initial thing on your fringe.","As you execute this algorithm, it's a very simple, short cycle.","You take something off the fringe, you put its children from the successor","function on the fringe, and those actions that generated the children","have costs as well as result states.","You stick all of that onto the fringe, and then you continue going.","You take something off the fringe and put its children on, you take","something else off the fringe and put its children on, and this frontier,","the fringe, moves more or less downward in the tree.","And whether it goes uniformly downward or mostly on the left, that's going to","be the difference between the algorithms like depth-first search and","breadth-first search.","As we go, we add up the costs.","Some search algorithms are sensitive to that cumulative cost, some of them","aren't, but each plan has a cost.","Here, this plan has cost 7.","It happens to be the optimal cost.","And this particular plan achieves the goal.","We keep taking things off the fringe and putting their children on until","something removed from the fringe satisfies the goal, at which","point, we return it.","Super critical.","You return the first plan removed from the fringe that achieves your goal,","not the first plan put into the fringe, and we'll see","today why that's important.","All right, so we saw depth-first search, we saw breadth-first search,","we saw uniform-cost search.","We're going to see two more today.","And I talked about them as if they're all basically the same thing except","for how you decide what comes off the fringe.","What does that mean in terms of implementation?","Well, in terms of implementation, it actually means that you can literally","implement one search algorithm, feel free to do this in your project ones,","you can implement one time and simply pass in variable","strategies in some way.","Conceptually, all the fringes we've talked about are priority queues.","There's a bunch of plans that are yet to be expanded on on the fringe, and","each one has some number that represents its priority.","In breadth-first, the priority is take off from the fringe the thing that has","the shallowest, the shortest, plan so far in terms of number of steps.","Uniform cost was the cheapest in terms of total path cost.","Depth-first was the deepest, so the opposite of breadth-first search.","Now, in practice for depth-first search and breadth-first search, you","don't actually need a priority queue to get their behaviors.","So if you want a depth-first search, you basically want to expand next","whatever you put on most recently, because it's the deepest.","And so you can just use a stack and take whatever's off the stack.","That means you don't need to have the overhead for a priority queue.","A general priority queue, putting things on and taking things off incurs","a log(n) penalty.","So in general, with a priority queue, if you have a certain number of nodes","that you're putting on the queue and taking off of the queue, then you're","going to get a log that many factor to represent the fact that really the","queue is capable of sorting.","You put everything on, you take everything off, now","they're in sorted order.","You don't want to pay that if you don't have to, so you'll see that","depth-first search and breadth-first search are usually implemented using","stacks and queues, but in principle, it's all just priority queues.","That is the one queue, it solves all search problems,","sometimes you can optimize.","All right.","So last time we finished out uninformed search.","In uninformed search, we explore this tree in some sense from the top down.","Depth-first search is more like from the left to the right.","We explore this tree in some way that is systematic.","Left to right or top down, or cheapest things first.","Systematic but unaware of where the goals are.","So even if the goal is down and to the right, breadth-first search will still","do the first layer then the second than the third layer.","It doesn't know where it's going.","It just does its thing.","PROFESSOR: Particularly in uniform cost search, the strategy was to","expand the lowest path cost, and we'd convinced ourselves that uniform cost","search is both complete and optimal under certain conditions.","And so the reason why it works is because you start at the top and you","basically work your way systematically down.","And when you find a goal, you find the cheapest goal in terms of cost.","And when you do that, you've expanded all plans that are","that cheap or cheaper.","So the good is uniform cost search is complete and optimal.","The bad was it kind of explored outward in every direction.","And let's see that in a couple different ways.","So one way I can show you that happening is to look","at this search demo.","Here is just a bunch of open water, green is the start state, red is the","stop state.","If I execute a uniform cost search, the dots will show the order in which","states are first expanded.","And you can see it just radiates outward.","It's checking all of the things that it can do in say, seven steps until","finally, it finds a plan that hits the goal.","Which means, in addition to going right, it's also going left, which","isn't very useful.","Let's see this in a different way.","OK here is in a Pac-Man configuration here, red indicates something expanded","earlier, and closer to black indicates something that was expanded later.","Black is the things that weren't expanded all.","You can see we considered all the states nearby the Pac-Man.","And basically, we had to consider the entire board because in the cost it","takes you to get to the goal, the dot in the lower left, you can basically","get anywhere and so you expand the whole board.","It's optimal, but you kind of did almost everything you could possibly","do in terms of work.","So we'd like to improve on that."]}