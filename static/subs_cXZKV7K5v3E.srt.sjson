{"start":[0,590,4110,6010,9870,12590,14410,18190,20420,23530,26990,31510,35020,39300,40440,44790,51030,54400,59290,68740,73700,76090,76870,80990,82690,84160,88950,93020,97520,99600,102290,107220,109400,111650,116900,118970,122230,123480,129289,132140,137480,140040,144780,151770,152120,156500,159100,163040,165980,166810,175310,183570,186310,194490,196800,197970,201950,207150,208680,212400,214380,217480,222880,225840,228910,230940,233220,235170,237250,242700,244910,249840,254490,256870,259709,261660,265260,266500,268495,271040,272560,280160,284650,285600,288540,293180,297280,298590,301685,306050,307170,309360,310760,315300,318470,321010,323840,326110,330580,331840,333010,337390,339212,340490,342200,346880,347820,349430,351070,353950,355410,356720,361730,365010,369680,371710,373530,375990,378570,382340,383360,387352,389400,392290,398370,401340,402930,404670,406380,409730,413960,417640,420190,424670,428500,430230,431920,432895,437200,439640,441670,444240,445210,449250,451530,457930,462680,467760,469140,471190,476430,478690,481210,486830,489380,492680,494630,498310,499970,501790,506530,509660,511050,513370,519200,522650,529180,530430],"end":[590,4110,6010,9870,12590,14410,18190,20420,23530,26990,31510,35020,39300,40440,44790,51030,54400,59290,68740,73700,76090,76870,80990,82690,84160,88950,93020,97520,99600,102290,107220,109400,111650,116900,118970,122230,123480,129289,132140,137480,140040,144780,151770,152120,156500,159100,163040,165980,166810,175310,183570,186310,194490,196800,197970,201950,207150,208680,212400,214380,217480,222880,225840,228910,230940,233220,235170,237250,242700,244910,249840,254490,256870,259709,261660,265260,266500,268495,271040,272560,280160,284650,285600,288540,293180,297280,298590,301685,306050,307170,309360,310760,315300,318470,321010,323840,326110,330580,331840,333010,337390,339212,340490,342200,346880,347820,349430,351070,353950,355410,356720,361730,365010,369680,371710,373530,375990,378570,382340,383360,387352,389400,392290,398370,401340,402930,404670,406380,409730,413960,417640,420190,424670,428500,430230,431920,432895,437200,439640,441670,444240,445210,449250,451530,457930,462680,467760,469140,471190,476430,478690,481210,486830,489380,492680,494630,498310,499970,501790,506530,509660,511050,513370,519200,522650,529180,530430,531640],"text":["PROFESSOR: Hi.","In this video we will step through the execution of a couple of such","algorithms on a few examples.","The first algorithm we'll consider is depth-first tree search.","While we step through it we'll visualize the algorithm using the","search tree visualization.","Here's our state space graph, which defines our search problem.","We even have cost annotated on the edges.","But remember, for dept-first search they will not play a role.","They are essentially just distractors for now.","We have a start state, which is denoted by s.","And a goal state, just a single goal state denoted by g.","And we'll look at how the search tree will evolve running depth-first search","off of medical tie-breaking.","We start with just the root node, s.","And when we call the successive function on s, we get two children--","a and b.","And remember, really these children are not just a and b, but they are a","plan to start on s and go to a; and a plan to start on s and go to b.","Then once we are in a, which is alphabetically first","compared to b, we will--","after expansion--","get c and b again.","These are not just c and b.","These are really partial plans.","So what you have here is the plan to start in s, go to a, and then go to c;","and the plan to start in s, go to a, then go to b.","Depth-first search always looks at the things deepest in the tree first.","There is two of them that are equally deep.","Amongst ones that are equally deep, it does alphabetical tie-breaking.","b comes first alphabetically, so now it will expand b.","b has just one successor, c.","So now we have c here.","Again this is not really just c, but it is a plan to start on s, go to a,","go to b, and then go to c.","So next node to expand we'll pick this one here because it's the deepest one","in the search tree.","And when expanding this one we get just one successor, g.","Again this is not just g that we have in the search tree here.","It's really the plan to start in s, go to a, go to b, go to c,","and then go to g.","Now the deepest one in the search tree is this node over here.","Expanding this node oversees, then, the last state in this plan is the","goal state.","That means when we are expanding this, we actually don't have to expand","anymore what we declare success.","And the path found is sabcg.","Now once again, look at depth-first tree search, but do a priority queue","visualization.","priority queue will use as its priority, depth in the search tree,","which corresponds to the number of steps in the plan.","So as always we initialize with the start state.","So our priority queue consists of just s with a priority of one.","Only one element in the priority queue, so that's the one","that gets taken out.","When we take out s in the priority queue, after expansion in our priority","queue we have the elements a and b.","It's not just a.","This is really going from s to a.","And for b also, it's not just b.","It's going from s to b that we have in our priority queue.","For sa, the priority level is 2.","And for sb the priority level is a 2 because [INAUDIBLE].","We'll do alphabetical tie-breaking, which means it'll expand this one","first, one going to a.","We'll take this element out and expand it.","a has two successors--","b and c.","So we'll add two elements to the priority queue that will be sab, and","the priority there will be three.","And there will be sac with a priority also of three.","And we will retain sb, looking for expansion again.","The nodes with the highest priority--","higher numbers higher priority for depth-first search.","The threes here.","Alphabetical tie-breaking makes us go with this one first. b has only one","successor, c.","So we have sabc--","","this has a priority of four.","The other two, sac with priority of 3; and sb with priority of two.","Next one to expand-- well the one with the highest priority here is sabc with","priority of four.","c has only one successor, g.","So after expansion we get one successor, sabcg.","This is a priority of five and the other two remain on the","queue as the were.","The next one to expand is this one here with a priority of five.","When we are about to expand this, we realize that the last state here is g,","which is the goal state.","So we actually don't have to expand anymore.","We can declare success.","The path we found to the goal is the one right here-- sabcg.","Now let's look at breadth-first tree search.","And we'll do the search tree visualization.","We have the same state space graph here.","So the search tree will be initialized with the start state.","And when calling the successive function on the start state we get two","successors--","a and b.","Remember these are really plans, not just states, that are associated with","the nodes in the search tree.","So sa and sb.","B","Then breadth-first search will look at the shallowest nodes in the tree that","haven't been expanded yet.","There's two of them.","We'll do alphabetical tie-breaking.","So sa will get expanded first.","a has two successors--","c and g.","So we'll get sac and sag.","","Next breadth-first search will expand again the one that is shallowest in","the search tree and hasn't been expanded yet, which is","this node over here.","And b has one successor, c.","So expanding this one leads to sbd.","Performing alphabetical, who's next?","This one here.","Expanding sac we get just one successor for c.","We get sacg.","Now these are the two shallowest in the search tree.","Alphabetical tie-breaking tells us to go with this one next, sag.","When we ask for expansion sag we notice that the last","state is the goal state.","That means we declare success.","We found a path to the goal.","And the path we return is sag.","Now let's do a visualization of our steps through using priority queues.","So a priority queue gets initialized with just a start state, s.","This start state is at level one in the search tree.","There's only one state that participates in this plan.","So priority of one.","That's our initial priority queue.","And we get, there's two successors--","a and b.","So we get the two successors on top priority queue-- sa, sb.","And both of them have a priority of two.","Pick the one with the lowest number.","Both of them have two, alphabetical tie-breaking picks.","This one next.","So next our priority queue will be placing that one with its successors.","a has two successors, c and g.","So we get we get sac, which will have priority of three.","And we get sag, which has a priority of three.","And we retain as b, which has a priority of two.","Two is lowest number.","Breadth-first search will go for that one.","Expanding, skipping the others, we'll get sac with priority of three; sag as","a priority of three.","And b has one successor, c.","So you get sbc, with a priority of three.","That's our new priority queue.","The lowest number here, which is a breadth-first search,","we'll look for is three.","Alphabetical tie-breaking puts sac first.","So expand that one.","c has one successor, g.","So we get sacg, which has a priority of four.","We retain the other two.","Now who's next?","The threes are the lowest numbers.","sag is alphabetically before sbc, so we have sag first.","The last one here is a goal state.","That means we declare success and we return sag as our path found by a","breadth-first tree search.",""]}