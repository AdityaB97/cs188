{"start":[0,1270,4070,7220,8600,12070,15740,19180,22590,24600,26440,29190,32870,36260,38100,42580,44370,48590,50550,54010,55550,58420,60680,63650,67500,69230,73400,75440,78390,80800,84880,87920,91010,94670,96200,98710,99810,103060,104780,107900,110430,113720,116340,118850,120400,123720,125200,128840,131270,134160,137200,138530,141560,142790,145210,148780,152890,154940,159100,162360,165590,168630,171220,174110,175230,177730,180420,182790,187340,189510,190930,193950,197040,200550,204030,206450,209850,213750,216780,220200,223560,227610,229860,231490,233730,236110,239080,241420,244360,247430,251260,252450,255720,258730,260640,264920,266030,269050,272610,276610,279800,283930,288080,290290,293310,296350,298060,300410,304060,305310],"end":[1270,4070,7220,8600,12070,15740,19180,22590,24600,26440,29190,32870,36260,38100,42580,44370,48590,50550,54010,55550,58420,60680,63650,67500,69230,73400,75440,78390,80800,84880,87920,91010,94670,96200,98710,99810,103060,104780,107900,110430,113720,116340,118850,120400,123720,125200,128840,131270,134160,137200,138530,141560,142790,145210,148780,152890,154940,159100,162360,165590,168630,171220,174110,175230,177730,180420,182790,187340,189510,190930,193950,197040,200550,204030,206450,209850,213750,216780,220200,223560,227610,229860,231490,233730,236110,239080,241420,244360,247430,251260,252450,255720,258730,260640,264920,266030,269050,272610,276610,279800,283930,288080,290290,293310,296350,298060,300410,304060,305310,305980],"text":["","PROFESSOR: So just remember what CSPs are.","They are a subclass of search problems, but they're an important","class of problems in their own right.","A CSP is defined by a set of variables.","Each variable has a set of values it can take on called its domain, and","then in addition to variables taking on values in the domain, there's a set","of constraints which describe the configurations of the variable","assignments which are acceptable.","Constraints can come in two forms.","They can either be implicit, meaning there's a little snippet of code that","you execute to see whether or not the constraint is satisfied, or explicit,","where you actually enumerate the legal tuples that you're willing to have in","the constraint.","So in the case that we looked at last time, we had a recurring example of","map coloring.","And so here's a CSP for map coloring, and each variable","might represent a country.","The domains are the colors we might use, so in the simplified version,","red, green, and blue.","And the constraints might be the two adjacent countries that touch on the","map can't have the same color.","That's an implicit constraint, and an explicit constraint would say these","two variables can either be red/green, blue/green, and so on.","Constraints come in multiple arities.","They can be unary, meaning they impose constraints on one variable at a time;","binary, meaning two variables at a time--","these inequality constraints are binary constraints; or n-ary.","For example, we might have five variables that are mutually","constrained, and that would be a degree five constraint.","The goal from a constraint satisfaction, as we've been talking","about in this class, is to find some solution-- meaning to find some","assignment to the variables which assigns a value to every variable and","meets all of the constraints.","You could imagine doing other things, but the algorithms we're presenting","here don't do these things.","For example, find all the solutions, find the best solution according to","some scoring function.","Here, we're just looking to find some legal solution.","","We had a basic mechanism for solving these called backtracking search,","which is really just a variant of depth-first search.","In this particular case, the implementation in the","pseudo code is recursive.","But in terms of the computation it performs, that computation is just","like depth-first search.","It starts at the top of the search tree, and at the top of the search","tree, you have no variables assigned.","And then you recurse, assigning one variable at a time.","In a naive depth-first search, all you know is two things about a state.","Does it have successors--","which everything that's not a complete assignment has successors--","and is it a goal?","So you don't know whether or not you have a goal until you get to the very","end at the bottom of the tree when all variables are assigned.","This recursive backtracking search has a big innovation in that it can detect","when a constraint is already violated.","That means not only does this state not pass the goal test, but it","essentially doesn't have successors, because it's already doomed.","So together, these ideas give this algorithm recursive backtracking","search that we've presented last time, and there were a couple question","marks, like what order should we work on the variables?","When we have a variable in front of us, which values should we try, in","what order, and so on?","But essentially, you do a depth-first search until you find a solution, or","you exhaust all options.","In order to improve backtracking search, we had a couple general","purpose ideas that together and individually give huge gains in speed.","But in the end, constraint satisfaction is","still an NP-hard problem.","That means no matter how many of these tricks we have, and how sophisticated","our CSP solvers are, there are still going to be instances that, to the","best of our knowledge, are going to be extremely hard.","So what can we do that, in general, will these things up greatly?","Well, one idea is ordering.","Whenever we have a choice of what variable to visit next in the depth","first procedure, we should be smart about which variable we work on.","And the short version was, we decided that if there are easy variables and","hard variables, where easy means there are lots of values left in their","domains, and hard means they're very heavily constrained and may only have","a few values left, we should work on the hard variables first.","The reason we should work on the hard variables first is because sooner or","later, you have to do all the variables.","You might as well do the hard ones now and get your backtracking out of the","way before you get too deep into the tree.","On the other hand, when we're considering the values that we're","going to try, you don't have to try all the values.","If you get lucky with the first value, you never have to try the others.","So you should try the values that are most likely to work out.","And the way that we formulated that as a heuristic here is the least","constraining value.","And the way we implement that is, we consider the possible values to","assign, we look at their effect on filtering--","so forward checking arc consistency--","and we choose the one that imposes the least constraints.","Then there was filtering.","Filtering was this idea that we want to detect inevitable failure early.","We had forward checking, which was a very limited kind of look ahead, where","even beyond the variables we've assigned, we check to see whether are","any constraint violations waiting to happen in one step.","And then we had this notion of arc consistency, where with arc","consistency, we have a much more thorough check for future inevitable","failures, but it's still not perfect.","So we still had a backtracking search.","We're going to talk a little bit more about arc consistency today, and then","we're going to talk about structure.","And the idea with structure is sometimes, we can look at the","constraint graph, and we can see something special there that lets us","speed up our solution.",""]}